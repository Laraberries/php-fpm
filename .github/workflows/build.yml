name: Docker Build

on:
    push:
        branches: helldar
        tags:
            - v*

jobs:
    build:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                php_version: [ 7.2.34, 7.3.23, 7.4.11, latest ]
        steps:
            -   name: Checkout
                uses: actions/checkout@v2
            -   name: Get the version
                id: get_version
                run: |
                    PREFIX=edge
                    SUFFIX=""
                    TAG=""

                    if [[ ${{ matrix.php_version }} != "latest" ]]; then
                        SUFFIX="-fpm"
                    fi

                    if [[ $GITHUB_REF == refs/tags/* ]]; then
                        PREFIX=latest
                        TAG=${GITHUB_REF/refs\/tags\/v}
                    fi

                    echo ::set-output name=prefix::${PREFIX}
                    echo ::set-output name=suffix::${SUFFIX}
            -   name: Prepare
                id: prepare
                env:
                    PHP_VERSION: ${{ matrix.php_version }}${{ steps.get_version.outputs.suffix }}
                run: |
                    DOCKER_IMAGE=${GITHUB_REPOSITORY,,}
                    DOCKER_PLATFORMS=linux/amd64,linux/arm,linux/arm64

                    MAJOR_VERSION=${PHP_VERSION:0:1}
                    MINOR_VERSION=${PHP_VERSION:0:1}.${PHP_VERSION:2:1}
                    PATCH_VERSION=${PHP_VERSION}

                    echo ::set-output name=docker_image::${DOCKER_IMAGE}
                    echo ::set-output name=major_version::${MAJOR_VERSION}
                    echo ::set-output name=minor_version::${MINOR_VERSION}
                    echo ::set-output name=patch_version::${PATCH_VERSION}

                    echo ::set-output name=buildx_args_latest::--platform ${DOCKER_PLATFORMS} \
                        --build-arg VERSION=${{ steps.get_version.outputs.prefix }} \
                        --build-arg PHP_VERSION=latest \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --tag "${DOCKER_IMAGE}:${{ steps.get_version.outputs.prefix }}" .

                    echo ::set-output name=buildx_args_major::--platform ${DOCKER_PLATFORMS} \
                        --build-arg VERSION=${{ steps.get_version.outputs.prefix }}-${MAJOR_VERSION} \
                        --build-arg PHP_VERSION=${MAJOR_VERSION}-fpm \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --tag "${DOCKER_IMAGE}:${{ steps.get_version.outputs.prefix }}-${MAJOR_VERSION}" .

                    echo ::set-output name=buildx_args_minor::--platform ${DOCKER_PLATFORMS} \
                        --build-arg VERSION=${{ steps.get_version.outputs.prefix }}-${MINOR_VERSION} \
                        --build-arg PHP_VERSION=${MINOR_VERSION}-fpm \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --tag "${DOCKER_IMAGE}:${{ steps.get_version.outputs.prefix }}-${MINOR_VERSION}" .

                    echo ::set-output name=buildx_args_patch::--platform ${DOCKER_PLATFORMS} \
                        --build-arg VERSION=${{ steps.get_version.outputs.prefix }}-${PATCH_VERSION} \
                        --build-arg PHP_VERSION=${PATCH_VERSION}-fpm \
                        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
                        --build-arg VCS_REF=${GITHUB_SHA::8} \
                        --tag "${DOCKER_IMAGE}:${{ steps.get_version.outputs.prefix }}-${PATCH_VERSION}" .
            -   name: Set up Docker Buildx
                uses: crazy-max/ghaction-docker-buildx@v3
            -   name: Docker Buildx (build latest)
                if: success() && matrix.php_version == 'latest'
                run: docker buildx build --output "type=image,push=false,name=${{ steps.get_version.outputs.prefix }}" ${{ steps.prepare.outputs.buildx_args_latest }}
            -   name: Docker Buildx (build major tag)
                if: success() && matrix.php_version != 'latest'
                run: docker buildx build --output "type=image,push=false,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.major_version }}" ${{ steps.prepare.outputs.buildx_args_major }}
            -   name: Docker Buildx (build minor tag)
                if: success() && matrix.php_version != 'latest'
                run: docker buildx build --output "type=image,push=false,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.minor_version }}" ${{ steps.prepare.outputs.buildx_args_minor }}
            -   name: Docker Buildx (build major tag)
                if: success() && matrix.php_version != 'latest'
                run: docker buildx build --output "type=image,push=false,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.patch_version }}" ${{ steps.prepare.outputs.buildx_args_patch }}
            -   name: Login to DockerHub
                if: success()
                uses: docker/login-action@v1
                with:
                    username: ${{ secrets.DOCKER_HUB_USER }}
                    password: ${{ secrets.DOCKER_HUB_PASSWORD }}
            -   name: Docker Buildx (push latest)
                if: success() && matrix.php_version == 'latest'
                run: docker buildx build --output "type=image,push=true,name=${{ steps.get_version.outputs.prefix }}" ${{ steps.prepare.outputs.buildx_args_latest }}
            -   name: Docker Buildx (push major tag)
                if: success() && matrix.php_version != 'latest'
                run: docker buildx build --output "type=image,push=true,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.major_version }}" ${{ steps.prepare.outputs.buildx_args_major }}
            -   name: Docker Buildx (push minor tag)
                if: success() && matrix.php_version != 'latest'
                run: docker buildx build --output "type=image,push=true,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.minor_version }}" ${{ steps.prepare.outputs.buildx_args_minor }}
            -   name: Docker Buildx (push patch tag)
                if: success() && matrix.php_version != 'latest'
                run: docker buildx build --output "type=image,push=true,name=${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.patch_version }}" ${{ steps.prepare.outputs.buildx_args_patch }}
            -   name: Inspect latest image
                if: success() && matrix.php_version == 'latest'
                run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.get_version.outputs.prefix }}
            -   name: Inspect major tag image
                if: success() && matrix.php_version != 'latest'
                run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.major_version }}
            -   name: Inspect minor tag image
                if: success() && matrix.php_version != 'latest'
                run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.minor_version }}
            -   name: Inspect patch tag image
                if: success() && matrix.php_version != 'latest'
                run: docker buildx imagetools inspect ${{ steps.prepare.outputs.docker_image }}:${{ steps.get_version.outputs.prefix }}-${{ steps.prepare.outputs.patch_version }}
